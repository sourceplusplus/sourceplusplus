name: Build platform

on:
  pull_request:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '**.gif'
      - '.idea/**'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Dorg.gradle.caching=true -Dorg.gradle.daemon=false -Xmx5g -Xms5g
  GRADLE_BUILD_ACTION_CACHE_DEBUG_ENABLED: true
  GRADLE_BUILD_ACTION_CACHE_KEY_JOB: ${{ github.workflow }}
  SPP_PROBE_ENABLED: "true"
  SPP_PROBE_WAIT_FOR_PLATFORM: "true"
  SPP_PROBE_PLATFORM_HOST: "https://cloud.sourceplus.plus"
  SPP_PROBE_SSL_ENABLED: "true"
  SPP_PROBE_CLIENT_ID: "spp_ci_ouSeYbx23Am6IMMfEnobeHWVt7j2X7EJTvyzoi65ktUSH9lmZp"
  SPP_PROBE_CLIENT_SECRET: "spp_cs_VvT7ryzSE7ud5UdMEi5iiVRfzt3u2mBRT2dqjZDaaNaPABR5dr"
  SPP_PROBE_TENANT_ID: "tenant1"
  SPP_PROBE_PLATFORM_CERTIFICATE: "MIIFODCCBCCgAwIBAgISA45itGRYnufLiVcFw8EgiPRMMA0GCSqGSIb3DQEBCwUAMDIxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MQswCQYDVQQDEwJSMzAeFw0yMzA1MDcwODE0NTRaFw0yMzA4MDUwODE0NTNaMBwxGjAYBgNVBAMMESouc291cmNlcGx1cy5wbHVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA4f8YdDxiiXWHRnNOgm6saybvK7v8nMZtYcOFAWhQUnjycmPiyCfcboGupr+9ADLYGXILn1oIhrNTjXNnXG2w/9gOVJ7WkuBWD0+2rOoaAyau7fyV+2m6HOhcxwQ+qhFQdh8kl0qHWZ2LrI4uSFcuqt0B41eezDflYZuAHuLAU9KVOco8XT+k1NzN0QlVLdsZQWuloDlCyhVlK4yHd2mWWw7UkmOrlH1cUDIwfew5mbnPAiu0L9lc9hgG5kjz8smwQb1DjcMPEK5ZiCSuxY/O9dKQ9EOHIzWcJCBvqAi772AkrKCZD62eFajjfWvx2GC10z3KmYT2ECMQAmwVhbB06wIDAQABo4ICXDCCAlgwDgYDVR0PAQH/BAQDAgWgMB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAMBgNVHRMBAf8EAjAAMB0GA1UdDgQWBBSFRQdHcS8vLRDrDF6kB99LKWLpgDAfBgNVHSMEGDAWgBQULrMXt1hWy65QCUDmH6+dixTCxjBVBggrBgEFBQcBAQRJMEcwIQYIKwYBBQUHMAGGFWh0dHA6Ly9yMy5vLmxlbmNyLm9yZzAiBggrBgEFBQcwAoYWaHR0cDovL3IzLmkubGVuY3Iub3JnLzAtBgNVHREEJjAkghEqLnNvdXJjZXBsdXMucGx1c4IPc291cmNlcGx1cy5wbHVzMEwGA1UdIARFMEMwCAYGZ4EMAQIBMDcGCysGAQQBgt8TAQEBMCgwJgYIKwYBBQUHAgEWGmh0dHA6Ly9jcHMubGV0c2VuY3J5cHQub3JnMIIBAwYKKwYBBAHWeQIEAgSB9ASB8QDvAHYAtz77JN+cTbp18jnFulj0bF38Qs96nzXEnh0JgSXttJkAAAGH9X4YCAAABAMARzBFAiEA6yCnWtuQo2nalzx1q21E3kjoArvrItZhjCfhRJQBo0wCIHCN9lEiCrVg+V0ctbpaLaetFlFMuXy7zFBar+b4Dk6/AHUAejKMVNi3LbYg6jjgUh7phBZwMhOFTTvSK8E6V6NS61IAAAGH9X4YGgAABAMARjBEAiBxm8VIH5TQQoPtwDvSsDmYOzapT2DqNK97nLlhFNBvOwIgMsbKkpW8bJmUZD79e6GezpRhnoLtU+uyM/nfAqfU3SgwDQYJKoZIhvcNAQELBQADggEBAEMKMWnV4F0Leb1tcJ10YqN0unaqB1UKg3VchF3jiQAVxtZC8oKG7THkMOgWmFb1QVdCKqyF90kRH45lx6fuNCCG5EztOXxZhyzymh44Ql61w2ssL8wsgps+4byrTUh2cvR5sjK1wS6ZMscTi+m0hbj0Z78U39cDb66nVgQmowYelGizAM1I/VBiOunetTIE9PRSBGdyPEtGLbnd0wsW1UK2mIaTgVLITRdh4ddHqaHzjpuxoiVX7m57gQw/14sKNxBv5DldIMbWPfI7mTiIKAsQfDEMpsrWMV+SVDUkcex4QBk7vDW3qzS2GdB2nrBFxFYvdfFQA+/CvPuMb8qFI30="

# Kill the workflow if PR is updated with a new commit
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  verify-mono:
    if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    runs-on: ubuntu-20.04
    timeout-minutes: 20

    outputs:
      version: ${{ steps.properties.outputs.version }}
      release_version: ${{ steps.properties.outputs.release_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Verify code style
        run: ./gradlew detekt

      - name: Verify license headers
        run: ./gradlew spotlessCheck

  test-platform:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    strategy:
      matrix:
        test_module: [ 'bridge', 'common', 'core', 'processor:live-view', 'processor:live-instrument', 'storage' ]

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Start spp-platform
        id: start_platform
        run: ./gradlew :platform:assembleUp

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Test platform
        run: ./gradlew --scan :platform:${{ matrix.test_module }}:test -Dtest.profile=integration -Dtest.includeSlow=true

      - name: Set test module name
        if: ${{ always() }}
        run: |
          TEST_MODULE=${{ matrix.test_module }}
          TEST_MODULE=${TEST_MODULE//:/-}
          echo "TEST_MODULE=$TEST_MODULE" >> $GITHUB_ENV
          echo "TEST_MODULE=$TEST_MODULE"

      - name: Download skywalking-api.log from spp-platform container
        if: ${{ !cancelled() }}
        run: docker cp $(docker ps -aqf "name=spp-platform"):/tmp/spp-probe/logs/skywalking-api.log .

      - name: Upload skywalking-api.log artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TEST_MODULE }}-skywalking-api.log
          path: skywalking-api.log

      - name: Make docker logs artifact
        if: ${{ !cancelled() && steps.start_platform.outcome == 'success' }}
        run: ./gradlew :platform:composeLogs

      - name: Upload docker logs artifact
        if: ${{ !cancelled() && steps.start_platform.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TEST_MODULE }}-docker.log
          path: platform/build/containers-logs/spp-platform.log

      - name: Upload test-live-instrument.log artifact
        if: ${{ always() && matrix.test_module == 'processor:live-instrument' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-live-instrument.log
          path: /tmp/spp-probe/logs/test-live-instrument.log

      - name: Upload test-live-view.log artifact
        if: ${{ always() && matrix.test_module == 'processor:live-view' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-live-view.log
          path: /tmp/spp-probe/logs/test-live-view.log

  test-probe-jvm:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Start spp-platform
        id: start_platform
        run: ./gradlew :platform:assembleUp

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Test probe-jvm
        timeout-minutes: 10
        run: |
          ./gradlew --scan -Dtest.profile=integration \
            :probes:jvm:boot:assemble \
            :probes:jvm:boot:test \
            :probes:jvm:common:test \
            :probes:jvm:services:test

      - name: Make docker logs artifact
        if: ${{ !cancelled() }}
        run: ./gradlew :platform:composeLogs

      - name: Upload docker logs artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-probe-jvm-platform-logs
          path: platform/build/containers-logs/spp-platform.log

      - name: Upload test-probe-jvm.log artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-probe-jvm.log
          path: /tmp/spp-probe/logs/skywalking-api.log

  test-probe-nodejs:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

        #todo: shouldn't need SPP_CLIENT_ACCESS_ENABLED=false
      - name: Write docker-compose.override.yml
        working-directory: docker/e2e
        run: |
          echo "version: '3.3'" > docker-compose.override.yml
          echo "services:" >> docker-compose.override.yml
          echo "  spp-platform:" >> docker-compose.override.yml
          echo "    environment:" >> docker-compose.override.yml
          echo "      - SPP_CLIENT_ACCESS_ENABLED=false" >> docker-compose.override.yml

      - name: Start spp-platform
        id: start_platform
        run: ./gradlew :platform:assembleUp

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: probes/nodejs
        run: npm install

      - name: Test probe-nodejs
        run: ./gradlew --scan :probes:nodejs:test

      - name: Make docker logs artifact
        if: ${{ !cancelled() && steps.start_platform.outcome == 'success' }}
        run: ./gradlew :platform:composeLogs

      - name: Upload docker logs artifact
        if: ${{ !cancelled() && steps.start_platform.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-probe-nodejs-platform-logs
          path: platform/build/containers-logs/spp-platform.log

  test-interface-cli:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Start spp-platform
        id: start_platform
        run: ./gradlew :platform:assembleUp

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Build protocol
        run: ./gradlew :protocol:assemble

      - name: Test interface-cli
        run: |
          ./gradlew --scan -Dtest.profile=integration \
            :interfaces:cli:test

      - name: Make docker logs artifact
        if: ${{ !cancelled() && steps.start_platform.outcome == 'success' }}
        run: ./gradlew :platform:composeLogs

      - name: Upload docker logs artifact
        if: ${{ !cancelled() && steps.start_platform.outcome == 'success' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-interface-cli-platform-logs
          path: platform/build/containers-logs/spp-platform.log

  test-interface-jetbrains:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Test interface-jetbrains
        run: |
          ./gradlew --scan \
            :interfaces:jetbrains:commander:test \
            :interfaces:jetbrains:commander:kotlin-compiler-wrapper:test \
            :interfaces:jetbrains:core:test \
            :interfaces:jetbrains:insight:test \
            :interfaces:jetbrains:marker:test \
            :interfaces:jetbrains:marker:js-marker:test \
            :interfaces:jetbrains:marker:jvm-marker:test \
            :interfaces:jetbrains:marker:py-marker:test \
            :interfaces:jetbrains:marker:ult-marker:test \
            :interfaces:jetbrains:plugin:test

        #todo: gradle-home-cache-excludes should handle
      - name: Remove IntelliJ from Gradle cache
        run: |
          rm -rf ~/.gradle/caches/modules-2/files-2.1/com.jetbrains.intellij.idea

  test-protocol:
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Test protocol
        run: ./gradlew --scan :protocol:test

  make-distribution:
    needs:
      - verify-mono
      - test-platform
      - test-probe-jvm
      - test-probe-nodejs
      - test-interface-cli
      - test-interface-jetbrains
      - test-protocol
    #todo: can ignore commits starting with docs
    if: github.ref == 'refs/heads/master'
    #if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    runs-on: ubuntu-20.04
    timeout-minutes: 20

    outputs:
      version: ${{ steps.properties.outputs.version }}
      release_version: ${{ steps.properties.outputs.release_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          VERSION=$(grep "projectVersion" gradle.properties | cut -d'=' -f2)
          echo "::set-output name=version::$VERSION"
          echo "SPP_PLATFORM_VERSION=$VERSION" >> $GITHUB_ENV
          echo "SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}" >> $GITHUB_ENV
          SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}
          echo "::set-output name=release_version::$SPP_RELEASE_VERSION"

      - name: Set build version
        run: |
          echo "BUILD_VERSION=$SPP_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.5.1
        with:
          gradle-home-cache-cleanup: true
          gradle-home-cache-excludes: |
            caches/modules-2/files-2.1/com.jetbrains.intellij.idea

      - name: Make distribution
        run: ./gradlew --scan makeDist -Dbuild.profile=release -PplatformVersion=$BUILD_VERSION

      - name: Upload spp-platform
        uses: actions/upload-artifact@v3
        with:
          name: spp-platform-${{ env.BUILD_VERSION }}.tar.gz
          path: ./dist/spp-platform-${{ env.BUILD_VERSION }}.tar.gz

      - name: Remove Old Snapshot Packages
        uses: smartsquaregmbh/delete-old-packages@v0.6.0
        with:
          keep: 0
          version-pattern: "^\\d+\\.\\d+\\.\\d+-SNAPSHOT$"
          names: |
            plus.sourceplus.platform.platform-bridge
            plus.sourceplus.platform.platform-common
            plus.sourceplus.platform.platform-core
            plus.sourceplus.platform.platform-storage
            plus.sourceplus.platform.live-instrument-processor
            plus.sourceplus.platform.live-view-processor

      - name: Publish New Snapshot Packages
        run: ./gradlew --scan -p platform publish -Dbuild.profile=release
        env:
          GH_PUBLISH_USERNAME: $GITHUB_ACTOR
          GH_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-draft:
    if: github.ref == 'refs/heads/master'
    needs: [ make-distribution ]
    runs-on: ubuntu-20.04

    steps:
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

      - name: Create Release Draft
        id: createDraft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.make-distribution.outputs.release_version }}
          release_name: v${{ needs.make-distribution.outputs.release_version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true

      - name: Download spp-platform artifact
        uses: actions/download-artifact@v3
        with:
          name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz

      - name: Upload spp-platform asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createDraft.outputs.upload_url }}
          asset_path: ./spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
          asset_name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
          asset_content_type: application/gzip

  docker-push:
    if: github.ref == 'refs/heads/master'
    needs:
      - make-distribution
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Download spp-platform artifact
        uses: actions/download-artifact@v3
        with:
          name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
          path: ./docker/spp-platform

      - name: Untar spp-platform
        run: cd ./docker/spp-platform && tar -zxvf spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz --strip-components=1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        run: docker buildx create --use --platform linux/arm64,linux/amd64 --driver-opt=network=host

      - name: Build & push spp-platform latest Docker image
        run: cd ./docker/spp-platform && docker buildx build . --platform linux/arm64,linux/amd64 --file Dockerfile --tag sourceplusplus/spp-platform:latest --push
