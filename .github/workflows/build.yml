name: Build platform

on:
  pull_request:
#     paths-ignore:
#       - '**.md'
#       - '**.svg'
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.svg'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Xmx5g -Xms5g

jobs:
  jvm-build:
    if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    runs-on: ubuntu-latest
    timeout-minutes: 40
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    outputs:
      version: ${{ steps.properties.outputs.version }}
      release_version: ${{ steps.properties.outputs.release_version }}
    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          VERSION=$(grep "projectVersion" gradle.properties | cut -d'=' -f2)
          echo "::set-output name=version::$VERSION"
          echo "SPP_PLATFORM_VERSION=$VERSION" >> $GITHUB_ENV
          echo "SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}" >> $GITHUB_ENV
          SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}
          echo "::set-output name=release_version::$SPP_RELEASE_VERSION"

      - name: Set build version (release)
        if: github.ref == 'refs/heads/master'
        run: |
          echo "BUILD_VERSION=$SPP_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Set build version (non-release)
        if: github.ref != 'refs/heads/master'
        run: |
          echo "BUILD_VERSION=$SPP_PLATFORM_VERSION" >> $GITHUB_ENV

      - name: Start platform (release)
        if: github.ref == 'refs/heads/master'
        run: ./gradlew -p platform assembleUp -Dbuild.profile=release -PplatformVersion=$BUILD_VERSION -PprobeVersion=$BUILD_VERSION

      - name: Start platform (non-release)
        if: github.ref != 'refs/heads/master'
        run: ./gradlew -p platform assembleUp -x :interfaces:booster-ui:buildSkyWalkingUI -PplatformVersion=$BUILD_VERSION -PprobeVersion=$BUILD_VERSION

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV
      - name: Wait for platform
        run: until $(curl --insecure --output /dev/null --silent --fail https://localhost:12800/api/new-token?access_token=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl --insecure https://localhost:12800/api/new-token?access_token=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV
      - name: Wait for skywalking
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --insecure --output /dev/null --silent --fail https://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Check platform
        run: ./gradlew -p platform check -x :interfaces:booster-ui:buildSkyWalkingUI -Dtest.profile=integration -PplatformVersion=$BUILD_VERSION -PprobeVersion=$BUILD_VERSION

      - run: ./gradlew :platform:composeLogs
        if: ${{ always() }}

      - name: Upload docker logs artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: docker-logs
          path: ./platform/build/containers-logs

      - run: docker cp spp-example-webapp:/tmp/spp-probe/logs/skywalking-api.log ./build/skywalking-api.log
        if: ${{ always() }}

      - name: Upload skywalking-api.log artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: skywalking-api.log
          path: ./build/skywalking-api.log

      - name: Make distribution
        if: github.ref == 'refs/heads/master'
        run: ./gradlew makeDist -x :interfaces:booster-ui:buildSkyWalkingUI -Dbuild.profile=release -PplatformVersion=$BUILD_VERSION

      - name: Upload spp-platform
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v3
        with:
          name: spp-platform-${{ env.BUILD_VERSION }}.tar.gz
          path: ./dist/spp-platform-${{ env.BUILD_VERSION }}.tar.gz

      - name: Remove Old Snapshot Packages
        if: github.ref == 'refs/heads/master'
        uses: smartsquaregmbh/delete-old-packages@v0.5.0
        with:
          keep: 0
          version-pattern: "^\\d+\\.\\d+\\.\\d+-SNAPSHOT$"
          names: |
            plus.sourceplus.platform.platform-bridge
            plus.sourceplus.platform.platform-common
            plus.sourceplus.platform.platform-core
            plus.sourceplus.platform.platform-dashboard
            plus.sourceplus.platform.platform-storage

      - name: Publish New Snapshot Packages
        if: github.ref == 'refs/heads/master'
        run: ./gradlew -p platform publish -x :interfaces:booster-ui:buildSkyWalkingUI -Dbuild.profile=release
        env:
          GH_PUBLISH_USERNAME: $GITHUB_ACTOR
          GH_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  releaseDraft:
    name: Release Draft
    needs: [jvm-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:

      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

      - name: Create Release Draft
        id: createDraft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.jvm-build.outputs.release_version }}
          release_name: v${{ needs.jvm-build.outputs.release_version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true

      - name: Download spp-platform artifact
        uses: actions/download-artifact@v3
        with:
          name: spp-platform-${{ needs.jvm-build.outputs.release_version }}.tar.gz

      - name: Upload spp-platform asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createDraft.outputs.upload_url }}
          asset_path: ./spp-platform-${{ needs.jvm-build.outputs.release_version }}.tar.gz
          asset_name: spp-platform-${{ needs.jvm-build.outputs.release_version }}.tar.gz
          asset_content_type: application/gzip

  docker-push:
    needs: [jvm-build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Download spp-platform artifact
        uses: actions/download-artifact@v3
        with:
          name: spp-platform-${{ needs.jvm-build.outputs.release_version }}.tar.gz
          path: ./docker/spp-platform

      - name: Untar spp-platform
        run: cd ./docker/spp-platform && tar -zxvf spp-platform-${{ needs.jvm-build.outputs.release_version }}.tar.gz --strip-components=1

      - name: Copy ui-initialized-templates to spp-platform Docker image
        run: cp -r ./docker/e2e/config/ui-initialized-templates ./docker/spp-platform

      - name: Build spp-platform tagged Docker image
        run: cd ./docker/spp-platform && docker build . --file Dockerfile --tag sourceplusplus/spp-platform:${{ needs.jvm-build.outputs.release_version }}

      - name: Retag spp-platform tagged Docker image to latest
        run: docker tag sourceplusplus/spp-platform:${{ needs.jvm-build.outputs.release_version }} sourceplusplus/spp-platform:latest

      - name: Push spp-platform latest Docker image
        run: docker push sourceplusplus/spp-platform:latest

      - name: Trigger demo.sourceplus.plus deploy
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_DISPATCH_ACCESS_TOKEN }}
          event-type: deploy-demo

  # Delete build artifacts
  cleanup:
    needs: [jvm-build, releaseDraft, docker-push]
    runs-on: ubuntu-latest

    steps:
      - name: Delete spp-platform
        uses: geekyeggo/delete-artifact@v2
        with:
          name: spp-platform-${{ needs.jvm-build.outputs.release_version }}.tar.gz
