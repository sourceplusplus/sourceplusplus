name: Build platform

on:
  pull_request:
  push:
    branches:
      - master
    paths-ignore:
      - '**.md'
      - '**.svg'
      - '**.gif'
      - '.idea/**'
  workflow_dispatch:

env:
  GRADLE_OPTS: -Xmx5g -Xms5g

jobs:
  verify-mono:
    if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    runs-on: ubuntu-20.04
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-verify-mono
      cancel-in-progress: true

    outputs:
      version: ${{ steps.properties.outputs.version }}
      release_version: ${{ steps.properties.outputs.release_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: verify-mono-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            verify-mono-${{ runner.os }}-gradle-

      - name: Verify code style
        run: ./gradlew --no-daemon detekt

      - name: Verify license headers
        run: ./gradlew --no-daemon spotlessCheck

  build-platform:
    if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    runs-on: ubuntu-20.04
    timeout-minutes: 15
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-build-platform
      cancel-in-progress: true

    outputs:
      version: ${{ steps.properties.outputs.version }}
      release_version: ${{ steps.properties.outputs.release_version }}
    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: build-platform-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            build-platform-${{ runner.os }}-gradle-

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          VERSION=$(grep "projectVersion" gradle.properties | cut -d'=' -f2)
          echo "::set-output name=version::$VERSION"
          echo "SPP_PLATFORM_VERSION=$VERSION" >> $GITHUB_ENV
          echo "SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}" >> $GITHUB_ENV
          SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}
          echo "::set-output name=release_version::$SPP_RELEASE_VERSION"

      - name: Set build version
        run: echo "BUILD_VERSION=$SPP_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Build platform
        run: ./gradlew --no-daemon -p platform composeBuild -Dbuild.profile=release -PplatformVersion=$BUILD_VERSION -PprobeVersion=$BUILD_VERSION

      - name: Save platform image
        run: docker save $(docker image ls  | grep 'spp-platform' | awk '{print $1}') > spp-platform.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: spp-platform
          path: spp-platform.tar

  test-platform:
    needs: [ verify-mono, build-platform ]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test-platform
      cancel-in-progress: true

    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: test-platform-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            test-platform-${{ runner.os }}-gradle-

      - name: Download spp-platform image
        timeout-minutes: 5
        uses: actions/download-artifact@v3
        with:
          name: spp-platform
          path: .

      - name: Load spp-platform
        run: docker load --input spp-platform.tar

      - name: Write docker-compose.override.yml
        working-directory: docker/e2e
        run: |
          echo "version: '3.3'" > docker-compose.override.yml
          echo "services:" >> docker-compose.override.yml
          echo "  spp-platform:" >> docker-compose.override.yml
          echo "    image: $(docker image ls  | grep 'spp-platform' | awk '{print $1}')" >> docker-compose.override.yml

      - name: Start spp-platform
        run: cd docker/e2e && docker-compose up -d

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Build probe
        run: ./gradlew --no-daemon -p probes/jvm jar

      - name: Test platform
        run: ./gradlew --no-daemon -p platform test -Dtest.profile=integration

      - run: cd docker/e2e && docker-compose logs spp-platform > spp-platform.log
        if: ${{ always() }}

      - name: Upload docker logs artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-platform-logs
          path: docker/e2e/spp-platform.log

      - name: Upload test-live-instrument.log artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-live-instrument.log
          path: /tmp/spp-probe/logs/test-live-instrument.log

      - name: Upload test-live-view.log artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: test-live-view.log
          path: /tmp/spp-probe/logs/test-live-view.log

  test-probe-jvm:
    needs: [ verify-mono, build-platform ]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test-probe-jvm
      cancel-in-progress: true

    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Download spp-platform image
        timeout-minutes: 5
        uses: actions/download-artifact@v3
        with:
          name: spp-platform
          path: .

      - name: Load spp-platform
        run: docker load --input spp-platform.tar

      - name: Write docker-compose.override.yml
        working-directory: docker/e2e
        run: |
          echo "version: '3.3'" > docker-compose.override.yml
          echo "services:" >> docker-compose.override.yml
          echo "  spp-platform:" >> docker-compose.override.yml
          echo "    image: $(docker image ls  | grep 'spp-platform' | awk '{print $1}')" >> docker-compose.override.yml

      - name: Start spp-platform
        run: cd docker/e2e && docker-compose up -d

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Test probe-jvm
        run: |
          ./gradlew --no-daemon -Dtest.profile=integration \
            :probes:jvm:boot:assemble \
            :probes:jvm:boot:test \
            :probes:jvm:common:test \
            :probes:jvm:services:test

  test-probe-nodejs:
    needs: [ verify-mono, build-platform ]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test-probe-nodejs
      cancel-in-progress: true

    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Download spp-platform image
        timeout-minutes: 5
        uses: actions/download-artifact@v3
        with:
          name: spp-platform
          path: .

      - name: Load spp-platform
        run: docker load --input spp-platform.tar

        #todo: shouldn't need SPP_CLIENT_ACCESS_ENABLED=false
      - name: Write docker-compose.override.yml
        working-directory: docker/e2e
        run: |
          echo "version: '3.3'" > docker-compose.override.yml
          echo "services:" >> docker-compose.override.yml
          echo "  spp-platform:" >> docker-compose.override.yml
          echo "    image: $(docker image ls  | grep 'spp-platform' | awk '{print $1}')" >> docker-compose.override.yml
          echo "    environment:" >> docker-compose.override.yml
          echo "      - SPP_CLIENT_ACCESS_ENABLED=false" >> docker-compose.override.yml

      - name: Start spp-platform
        run: cd docker/e2e && docker-compose up -d

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        working-directory: probes/nodejs
        run: npm install

      - name: Download spp-platform image
        timeout-minutes: 5
        uses: actions/download-artifact@v3
        with:
          name: spp-platform
          path: .

      - name: Test probe-nodejs
        run: ./gradlew -p probes/nodejs test
        env:
          CI: true

  test-interface-cli:
    needs: [ verify-mono, build-platform ]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test-interface-cli
      cancel-in-progress: true

    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Download spp-platform image
        timeout-minutes: 5
        uses: actions/download-artifact@v3
        with:
          name: spp-platform
          path: .

      - name: Load spp-platform
        run: docker load --input spp-platform.tar

      - name: Write docker-compose.override.yml
        working-directory: docker/e2e
        run: |
          echo "version: '3.3'" > docker-compose.override.yml
          echo "services:" >> docker-compose.override.yml
          echo "  spp-platform:" >> docker-compose.override.yml
          echo "    image: $(docker image ls  | grep 'spp-platform' | awk '{print $1}')" >> docker-compose.override.yml

      - name: Start spp-platform
        run: cd docker/e2e && docker-compose up -d

      - name: Docker IPs
        run: docker inspect --format='{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - name: Set SPP_PLATFORM_HOST
        run: SPP_PLATFORM_HOST=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aqf "name=spp-platform")) && echo "SPP_PLATFORM_HOST=$SPP_PLATFORM_HOST" >> $GITHUB_ENV

      - name: Get access token
        timeout-minutes: 5
        run: until $(curl --output /dev/null --silent --fail http://localhost:12800/api/new-token?authorization_code=change-me); do printf '.'; sleep 5; done && SPP_JWT_TOKEN=$(curl http://localhost:12800/api/new-token?authorization_code=change-me) && echo "SPP_JWT_TOKEN=$SPP_JWT_TOKEN" >> $GITHUB_ENV

      - name: Wait for platform
        timeout-minutes: 5
        run: |
          until $(curl --header "Authorization: Bearer ${{ env.SPP_JWT_TOKEN }}" --output /dev/null --silent --fail http://localhost:12800/health); do printf '.'; sleep 5; done

      - name: Build protocol
        run: ./gradlew --no-daemon :protocol:assemble

      - name: Test interface-cli
        run: |
          ./gradlew --no-daemon -Dtest.profile=integration \
            :interfaces:cli:test

  test-interface-jetbrains:
    needs: [ verify-mono ]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-test-interface-jetbrains
      cancel-in-progress: true

    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: test-interface-jetbrains-${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            test-interface-jetbrains-${{ runner.os }}-gradle-

      - name: Test interface-jetbrains
        run: |
          ./gradlew --no-daemon -Dtest.profile=integration \
            :interfaces:jetbrains:commander:test \
            :interfaces:jetbrains:commander:kotlin-compiler-wrapper:test \
            :interfaces:jetbrains:common:test \
            :interfaces:jetbrains:core:test \
            :interfaces:jetbrains:insight:test \
            :interfaces:jetbrains:marker:test \
            :interfaces:jetbrains:marker:js-marker:test \
            :interfaces:jetbrains:marker:jvm-marker:test \
            :interfaces:jetbrains:marker:py-marker:test \
            :interfaces:jetbrains:marker:ult-marker:test \
            :interfaces:jetbrains:monitor:test \
            :interfaces:jetbrains:plugin:test 

  test-protocol:
    needs: [ verify-mono ]
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-protocol
      cancel-in-progress: true

    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Test protocol
        run: ./gradlew -p protocol test

  make-distribution:
    #todo: can ignore commits starting with docs
    if: github.ref == 'refs/heads/master'
    #if: ${{ !contains(github.event.pull_request.head.ref, '#docs') && !(startsWith(github.event.head_commit.message, 'Merge pull request') && contains(github.event.head_commit.message, '#docs')) }}

    needs:
      - test-platform
      - test-probe-jvm
      - test-probe-nodejs
      - test-interface-cli
      - test-interface-jetbrains
      - test-protocol
    runs-on: ubuntu-20.04
    timeout-minutes: 40
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    outputs:
      version: ${{ steps.properties.outputs.version }}
      release_version: ${{ steps.properties.outputs.release_version }}
    steps:
      - uses: docker-practice/actions-setup-docker@master
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Export Properties
        id: properties
        shell: bash
        run: |
          VERSION=$(grep "projectVersion" gradle.properties | cut -d'=' -f2)
          echo "::set-output name=version::$VERSION"
          echo "SPP_PLATFORM_VERSION=$VERSION" >> $GITHUB_ENV
          echo "SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}" >> $GITHUB_ENV
          SPP_RELEASE_VERSION=${VERSION/-SNAPSHOT/}
          echo "::set-output name=release_version::$SPP_RELEASE_VERSION"

      - name: Set build version
        run: |
          echo "BUILD_VERSION=$SPP_RELEASE_VERSION" >> $GITHUB_ENV

      - name: Make distribution
        run: ./gradlew --no-daemon makeDist -Dbuild.profile=release -PplatformVersion=$BUILD_VERSION

      - name: Upload spp-platform
        uses: actions/upload-artifact@v3
        with:
          name: spp-platform-${{ env.BUILD_VERSION }}.tar.gz
          path: ./dist/spp-platform-${{ env.BUILD_VERSION }}.tar.gz

      - name: Remove Old Snapshot Packages
        uses: smartsquaregmbh/delete-old-packages@v0.6.0
        with:
          keep: 0
          version-pattern: "^\\d+\\.\\d+\\.\\d+-SNAPSHOT$"
          names: |
            plus.sourceplus.platform.platform-bridge
            plus.sourceplus.platform.platform-common
            plus.sourceplus.platform.platform-core
            plus.sourceplus.platform.platform-storage
            plus.sourceplus.platform.live-instrument-processor
            plus.sourceplus.platform.live-view-processor

      - name: Publish New Snapshot Packages
        run: ./gradlew --no-daemon -p platform publish -Dbuild.profile=release
        env:
          GH_PUBLISH_USERNAME: $GITHUB_ACTOR
          GH_PUBLISH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release-draft:
    name: Release Draft
    needs: [ make-distribution ]
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'
    steps:

      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases \
            | tr '\r\n' ' ' \
            | jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' \
          curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" https://api.github.com/repos/$GITHUB_REPOSITORY/releases/{}

      - name: Create Release Draft
        id: createDraft
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.make-distribution.outputs.release_version }}
          release_name: v${{ needs.make-distribution.outputs.release_version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true

      - name: Download spp-platform artifact
        uses: actions/download-artifact@v3
        with:
          name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz

      - name: Upload spp-platform asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.createDraft.outputs.upload_url }}
          asset_path: ./spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
          asset_name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
          asset_content_type: application/gzip

  docker-push:
    needs: [ make-distribution ]
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Login to DockerHub Registry
        run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Download spp-platform artifact
        uses: actions/download-artifact@v3
        with:
          name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
          path: ./docker/spp-platform

      - name: Untar spp-platform
        run: cd ./docker/spp-platform && tar -zxvf spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz --strip-components=1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        run: docker buildx create --use --platform linux/arm64,linux/amd64 --driver-opt=network=host

      - name: Build & push spp-platform latest Docker image
        run: cd ./docker/spp-platform && docker buildx build . --platform linux/arm64,linux/amd64 --file Dockerfile --tag sourceplusplus/spp-platform:latest --push

  # Delete build artifacts
  cleanup:
    needs: [ release-draft, docker-push ]
    runs-on: ubuntu-20.04

    steps:
      - name: Delete spp-platform image
        uses: geekyeggo/delete-artifact@v2
        with:
          name: spp-platform

      - name: Delete spp-platform distribution
        uses: geekyeggo/delete-artifact@v2
        with:
          name: spp-platform-${{ needs.make-distribution.outputs.release_version }}.tar.gz
