enum RedactionType {
    IDENTIFIER_MATCH,
    VALUE_REGEX
}

enum ArtifactType {
    CLASS,
    METHOD,
    STATEMENT,
    EXPRESSION,
    ENDPOINT
}

type ClientAccess {
    id: String
    secret: String
}

type ArtifactQualifiedName {
    identifier: String
    commitId: String
    artifactType: ArtifactType
    lineNumber: Int
    operationName: String
}

input ArtifactQualifiedNameInput {
    identifier: String
    commitId: String
    artifactType: ArtifactType
    lineNumber: Int
    operationName: String
}

type LiveViewConfig {
    viewName: String!
    viewMetrics: [String!]
    refreshRateLimit: Int!
}

input LiveViewConfigInput {
    viewName: String!
    viewMetrics: [String!]!
    refreshRateLimit: Int
}

type LiveView {
    subscriptionId: String
    entityIds: [String!]
    artifactQualifiedName: ArtifactQualifiedName
    artifactLocation: LiveSourceLocation
    viewConfig: LiveViewConfig
}

type HistoricalView {
    entityIds: [String!]
    metricIds: [String!]
    data: String!
}

input LiveViewInput {
    entityIds: [String!]!
    #artifactQualifiedName: ArtifactQualifiedNameInput!
    viewConfig: LiveViewConfigInput!
}

type Self {
    developer: Developer!
    roles: [DeveloperRole!]
    permissions: [RolePermission!]
    access: [AccessPermission!]
}

type Developer {
    id: String!
    authorizationCode: String
}

type DeveloperRole {
    roleName: String!
}

enum RolePermission {
    RESET,

    GET_HEALTH,
    GET_STATS,
    GET_CLIENTS,
    GET_METRICS,

    SET_CONFIGURATION_VALUE,
    GET_CONFIGURATION_VALUE,

    ADD_CLIENT_ACCESS,
    REMOVE_CLIENT_ACCESS,
    GET_CLIENT_ACCESSORS,
    UPDATE_CLIENT_ACCESS,

    ADD_DEVELOPER,
    REMOVE_DEVELOPER,
    GET_DEVELOPERS,
    REFRESH_DEVELOPER_TOKEN,

    ADD_ROLE,
    REMOVE_ROLE,
    GET_ROLES,
    GET_DEVELOPER_ROLES,
    ADD_DEVELOPER_ROLE,
    REMOVE_DEVELOPER_ROLE,

    GET_DEVELOPER_PERMISSIONS,
    GET_ROLE_PERMISSIONS,
    ADD_ROLE_PERMISSION,
    REMOVE_ROLE_PERMISSION,

    GET_ACCESS_PERMISSIONS,
    GET_DATA_REDACTIONS,
    UPDATE_DATA_REDACTION,
    ADD_ACCESS_PERMISSION,
    REMOVE_ACCESS_PERMISSION,

    ADD_LIVE_BREAKPOINT,
    ADD_LIVE_LOG,
    ADD_LIVE_METER,
    ADD_LIVE_SPAN

    GET_LIVE_INSTRUMENTS,
    GET_LIVE_BREAKPOINTS,
    GET_LIVE_LOGS,
    GET_LIVE_METERS,
    GET_LIVE_SPANS,
    REMOVE_LIVE_INSTRUMENT,
    CLEAR_ALL_LIVE_INSTRUMENTS,

    BREAKPOINT_VARIABLE_CONTROL,

    ADD_LIVE_VIEW,
    REMOVE_LIVE_VIEW,
    GET_LIVE_VIEWS,

    #VIEW_OVERVIEW,
    VIEW_ACTIVITY,
    VIEW_TRACES,
    VIEW_LOGS,

    SHOW_QUICK_STATS #todo: should have permissions around allowed metrics instead of commands
}

enum ThrottleStep {
    SECOND,
    MINUTE,
    HOUR,
    DAY
}

enum MeterType {
    COUNT,
    GAUGE,
    HISTOGRAM,
    METHOD_TIMER
}

enum MetricValueType {
    NUMBER,
    NUMBER_SUPPLIER,
    NUMBER_EXPRESSION,
    VALUE,
    VALUE_SUPPLIER,
    VALUE_EXPRESSION
}

enum LocationScope {
    LINE,
    LAMBDA,
    BOTH
}

type MetricValue {
    valueType: MetricValueType!
    value: String
}

input MetricValueInput {
    valueType: MetricValueType!
    value: String
}

enum MeterValueType {
    VALUE,
    VALUE_EXPRESSION
}

type MeterTag {
    key: String!
    valueType: MeterValueType!
    value: String!
}

input MeterTagInput {
    key: String!
    valueType: MeterValueType!
    value: String!
}

type MeterPartition {
    keys: [String!]!
    valueType: MeterValueType!
    value: String!
}

input MeterPartitionInput {
    keys: [String!]!
    valueType: MeterValueType!
    value: String!
}

type InstrumentThrottle {
    limit: Int!
    step: ThrottleStep!
}

input InstrumentThrottleInput {
    limit: Int!
    step: ThrottleStep!
}

type KeyValue {
    key: String!
    value: String!
}

type MetaInfo {
    name: String!
    value: String!
}

enum LiveInstrumentEventType {
    BREAKPOINT_ADDED,
    BREAKPOINT_APPLIED,
    BREAKPOINT_HIT,
    BREAKPOINT_REMOVED,

    LOG_ADDED,
    LOG_APPLIED,
    LOG_HIT,
    LOG_REMOVED,

    METER_ADDED,
    METER_APPLIED,
    METER_HIT,
    METER_UPDATED,
    METER_REMOVED,

    SPAN_ADDED,
    SPAN_APPLIED,
    SPAN_REMOVED
}

type LiveInstrumentEvent {
    instrument: LiveInstrument!
    occurredAt: Long!
    eventType: LiveInstrumentEventType!
}

interface LiveInstrument {
    id: String!
    location: LiveSourceLocation!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    applied: Boolean
    pending: Boolean
    throttle: InstrumentThrottle
    type: LiveInstrumentType
    meta: [MetaInfo]
}

type LiveMeter implements LiveInstrument {
    meterType: MeterType!
    metricValue: MetricValue!
    meterTags: [MeterTag!]
    meterPartitions: [MeterPartition!]
    id: String!
    location: LiveSourceLocation!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    applied: Boolean
    pending: Boolean
    throttle: InstrumentThrottle
    type: LiveInstrumentType
    meta: [MetaInfo]
}

input LiveMeterInput {
    id: String
    meterType: MeterType!
    metricValue: MetricValueInput!
    meterTags: [MeterTagInput!]
    meterPartitions: [MeterPartitionInput!]
    location: LiveSourceLocationInput!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    throttle: InstrumentThrottleInput
    meta: [MetaInfoInput]
}

type LiveLog implements LiveInstrument {
    logFormat: String!
    logArguments: [String!]!
    id: String!
    location: LiveSourceLocation!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    applied: Boolean
    pending: Boolean
    throttle: InstrumentThrottle
    type: LiveInstrumentType
    meta: [MetaInfo]
}

input LiveLogInput {
    id: String
    logFormat: String!
    logArguments: [String!]
    location: LiveSourceLocationInput!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    throttle: InstrumentThrottleInput
    meta: [MetaInfoInput]
}

type LiveBreakpoint implements LiveInstrument {
    id: String!
    variableControl: LiveVariableControl
    location: LiveSourceLocation!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    applied: Boolean
    pending: Boolean
    throttle: InstrumentThrottle
    type: LiveInstrumentType
    meta: [MetaInfo]
}

input LiveBreakpointInput {
    id: String
    variableControl: LiveVariableControlInput
    location: LiveSourceLocationInput!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    throttle: InstrumentThrottleInput
    meta: [MetaInfoInput]
}

type LiveVariableControl {
    maxObjectDepth: Int
    maxObjectSize: Int
    maxCollectionLength: Int
    variableTypeConfig: [VariableTypeConfig]
    variableNameConfig: [VariableNameConfig]
}

input LiveVariableControlInput {
    maxObjectDepth: Int
    maxObjectSize: Int
    maxCollectionLength: Int
    variableTypeConfig: [VariableTypeConfigInput]
    variableNameConfig: [VariableNameConfigInput]
}

type LiveVariableControlBase {
    maxObjectDepth: Int
    maxObjectSize: Int
    maxCollectionLength: Int
}

input LiveVariableControlBaseInput {
    maxObjectDepth: Int
    maxObjectSize: Int
    maxCollectionLength: Int
}

type VariableTypeConfig {
    type: String!
    control: LiveVariableControlBase!
}

input VariableTypeConfigInput {
    type: String!
    control: LiveVariableControlBaseInput!
}

type VariableNameConfig {
    name: String!
    control: LiveVariableControlBase!
}

input VariableNameConfigInput {
    name: String!
    control: LiveVariableControlBaseInput!
}

type LiveSpan implements LiveInstrument {
    id: String!
    operationName: String!
    location: LiveSourceLocation!
    condition: String
    expiresAt: Long
    hitLimit: Int
    applyImmediately: Boolean
    applied: Boolean
    pending: Boolean
    throttle: InstrumentThrottle
    type: LiveInstrumentType
    meta: [MetaInfo]
}

input LiveSpanInput {
    id: String
    operationName: String!
    location: LiveSpanLocationInput!
    #condition: String #todo: impl
    #expiresAt: Long #todo: impl
    #hitLimit: Int #todo: impl
    applyImmediately: Boolean
    #throttle: InstrumentThrottleInput #todo: impl
    meta: [MetaInfoInput]
}

input MetaInfoInput {
    name: String!
    value: String!
}

type LiveSourceLocation {
    source: String!
    line: Int
    service: Service
    probeId: String
    scope: LocationScope!
}

input LiveSourceLocationInput {
    source: String!
    line: Int
    service: ServiceInput
    probeId: String
    scope: LocationScope
}

input LiveSpanLocationInput {
    source: String!
}

input LiveSpanSourceLocationInput {
    source: String!
    method: String
}

enum AccessType {
    BLACK_LIST
    WHITE_LIST
}

type AccessPermission {
    id: String!
    locationPatterns: [String!]
    type: AccessType!
}

type DataRedaction {
    id: String!
    type: RedactionType!
    lookup: String!
    replacement: String!
}

type Service {
    id: String!
    name: String!
    group: String
    shortName: String
    layers: [String!]!
    normal: Boolean!
    environment: String
    version: String
}

input ServiceInput {
    name: String
    environment: String
    version: String
}

type ServiceInstance {
    id: String!
    name: String!
    language: String!
    instanceUUID: String!
    attributes: [KeyValue!]!
}

type ServiceEndpoint {
    id: String!
    name: String!
}

type TraceSpanRef {
    traceId: String!
    parentSegmentId: String!
    parentSpanId: Int!
    type: String!
}

type TraceSpanLogEntry {
    time: Long!
    data: String!
}

type TraceSpan {
    traceId: String!
    segmentId: String!
    spanId: Int!
    parentSpanId: Int
    refs: [TraceSpanRef!]!
    serviceCode: String!
    serviceInstanceName: String
    startTime: Long!
    endTime: Long!
    endpointName: String
    #artifactQualifiedName
    type: String!
    peer: String
    component: String
    error: Boolean
    childError: Boolean
    #hasChildStack
    layer: String
    tags: [KeyValue!]!
    logs: [TraceSpanLogEntry!]!
    meta: [KeyValue!]!
}

type TraceSegment {
    segmentId: String!
    traceSpans: [TraceSpan!]!
}

type TraceStack {
    traceSpans: [TraceSpan!]!
}

type TimeInfo {
    timezone: String!
    currentTimestamp: Long!
}

type SystemConfig {
    config: String!
    value: String!
}

type SelectedRecord {
    name: String!
    id: String!
    value: String!
    refId: String
}

input RulePartitionInput {
    find: String!
    replace: String!
}

type RulePartition {
    find: String!
    replace: String!
}

type ViewRule {
    name: String!
    exp: String!
    partitions: [RulePartition!]!
    meterIds: [String!]!
}

input ViewRuleInput {
    name: String!
    exp: String!
    partitions: [RulePartitionInput!]!
    meterIds: [String!]!
}

enum MetricScope {
    All,
    Service,
    ServiceInstance,
    Endpoint,
    ServiceRelation,
    ServiceInstanceRelation,
    EndpointRelation
}

enum MetricOrder {
    ASC,
    DES
}

type Query {
    getVersion: String!
    getTimeInfo: TimeInfo!

    getAccessToken(authorizationCode: String!): String!
    getAccessPermissions: [AccessPermission!]!
    getAccessPermission(id: String!): AccessPermission!
    getRoleAccessPermissions(role: String!): [AccessPermission!]!
    getDeveloperAccessPermissions(developerId: String!): [AccessPermission!]!

    getDataRedactions: [DataRedaction!]!
    getDataRedaction(id: String!): DataRedaction!
    getRoleDataRedactions(role: String!): [DataRedaction!]!
    getDeveloperDataRedactions(developerId: String!): [DataRedaction!]!

    getRoles: [DeveloperRole!]!
    getRolePermissions(role: String!): [RolePermission!]!
    getDeveloperRoles(id: String!): [DeveloperRole!]!
    getDeveloperPermissions(id: String!): [RolePermission!]!

    getDevelopers: [Developer!]!
    getLiveInstrument(
        id: String!,
        includeArchive: Boolean
    ): LiveInstrument
    getLiveInstruments: [LiveInstrument!]!
    getLiveBreakpoints: [LiveBreakpoint!]!
    getLiveLogs: [LiveLog!]!
    getLiveMeters: [LiveMeter!]!
    getLiveSpans: [LiveSpan!]!

    getLiveInstrumentEvents(
        instrumentId: String,
        start: Long,
        stop: Long,
        offset: Int,
        limit: Int
    ): [LiveInstrumentEvent!]!

    getSelf: Self!
    getServices: [Service!]!
    getInstances(serviceId: String!): [ServiceInstance!]!
    getEndpoints(serviceId: String!): [ServiceEndpoint!]!
    searchEndpoints(serviceId: String!, keyword: String!, limit: Int): [ServiceEndpoint!]!
    sortMetrics(
        name: String!
        parentService: String
        normal: Boolean,
        scope: MetricScope,
        topN: Int!,
        order: MetricOrder!,
        step: MetricStep!,
        start: Long!,
        stop: Long
    ): [SelectedRecord!]!
    getClientAccessors: [ClientAccess!]!

    getRules: [ViewRule!]!
    getRule(ruleName: String!): ViewRule
    getLiveViews: [LiveView!]!
    getHistoricalMetrics(
        entityIds: [String!]!,
        metricIds: [String!]!,
        step: MetricStep!,
        start: String!,
        stop: String,
        labels: [String!]
    ): HistoricalView!

    getTraceStack(traceId: String!): TraceStack

    getConfiguration: [SystemConfig!]!
    getConfigValue(config: String!): String!
}

type Mutation {
    reset: Boolean!
    addAccessPermission(locationPatterns: [String!], type: AccessType!): AccessPermission!
    removeAccessPermission(id: String!): Boolean!
    addRoleAccessPermission(role: String!, accessPermissionId: String!): Boolean!
    removeRoleAccessPermission(role: String!, accessPermissionId: String!): Boolean!

    addDataRedaction(id: String, type: RedactionType!, lookup: String!, replacement: String!): DataRedaction!
    updateDataRedaction(id: String!, type: RedactionType, lookup: String, replacement: String): DataRedaction!
    removeDataRedaction(id: String!): Boolean!
    addRoleDataRedaction(role: String!, dataRedactionId: String!): Boolean!
    removeRoleDataRedaction(role: String!, dataRedactionId: String!): Boolean!

    addRole(role: String!): Boolean!
    removeRole(role: String!): Boolean!
    addRolePermission(role: String!, permission: String!): Boolean!
    removeRolePermission(role: String!, permission: String!): Boolean!
    addDeveloperRole(id: String!, role: String!): Boolean!
    removeDeveloperRole(id: String!, role: String!): Boolean!

    addDeveloper(id: String!, authorizationCode: String): Developer!
    refreshAuthorizationCode(id: String!): Developer!
    removeDeveloper(id: String!): Boolean!
    removeLiveInstrument(id: String!): LiveInstrument
    removeLiveInstruments(source: String!, line: Int!): [LiveInstrument!]!
    clearLiveInstruments: Boolean!

    addLiveBreakpoint(input: LiveBreakpointInput!): LiveBreakpoint!
    addLiveLog(input: LiveLogInput!): LiveLog!
    addLiveMeter(input: LiveMeterInput!): LiveMeter!
    addLiveSpan(input: LiveSpanInput!): LiveSpan!

    saveRule(input: ViewRuleInput!): ViewRule!
    deleteRule(ruleName: String!): Boolean!
    addLiveView(input: LiveViewInput!): LiveView!
    clearLiveViews: Boolean!

    addClientAccess: ClientAccess!
    removeClientAccess(id: String!): Boolean!
    refreshClientAccess(id: String!): ClientAccess!

    setConfigValue(config: String!, value: String!): Boolean!
}

scalar Long

enum LiveInstrumentType {
    BREAKPOINT,
    LOG,
    METER,
    SPAN
}

enum MetricStep {
    SECOND,
    MINUTE,
    HOUR,
    DAY
}
